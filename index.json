[{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://timur-bahadir.de/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"","tags":null,"title":"Timur Bahadir","type":"author"},{"authors":null,"categories":null,"content":"Programming can be hard. Remembering everything is impossible. When i return to a project or framework after some time of not using it, having to re-research everything is tedious. So im using this page as a place to store some of the knowledge i might need again in the future, for myself and others that may find and need it.\n","date":1536444000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536444000,"objectID":"c3224f3a64174f08aaf31e1f1d16ffd3","permalink":"https://timur-bahadir.de/tutorial/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/","section":"tutorial","summary":"Programming can be hard. Remembering everything is impossible. When i return to a project or framework after some time of not using it, having to re-research everything is tedious. So im using this page as a place to store some of the knowledge i might need again in the future, for myself and others that may find and need it.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"For my bachelor thesis i wrote a person recognition system with OpenHAB integration. The system consists of a main application, written in python 3.6, called SmurvCamera (Smart surveillance camera).\nFirst the application learns the names and faces of a group of people, each with its own set of training data (images of their faces). Then it continuously scans a video stream, e.g.: a webcam or a RaspberryPi camera, and analyses each frame.\nThe frames go through a pipeline of operations. Since face detection and recognition are complicated tasks not every frame can should be scanned. The first test if a frame is relevant is a motion detection. Only if motion is detected a face detection is attempted. If a face is found, the application then tries to recognize the face, by comparing it to the set of trained faces.\nThis process creates a bunch of data that is then shared if desired. E-Mail Notifications can be send containing relevant information. Most importantly the data is transmitted to a OpenHAB server via MQTT and can then be used to automate home automation tasks.\nThe entirety of the SmurvApplication is very configurable. There are in total 63 settings to control the application. Explaining each one would take to much space, although some notable ones are:\n Face detection method  Local binary pattern HAAR cascades Histogram of Oriented Gradients Convolutional neural network   \r\r\r ","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"d498c2a50a7ea174c76b4e007a14b638","permalink":"https://timur-bahadir.de/project/bachelor/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/bachelor/","section":"project","summary":"For my bachelor thesis i wrote a person recognition system with OpenHAB integration.","tags":["university","machine","learning","OpenCV","Dlib","face","recognition","python"],"title":"Bachelor Thesis: Person recognition system with OpenHAB integration","type":"project"},{"authors":null,"categories":null,"content":"To make the development of cellular automatons easier i developed a framework/sandbox application. With it, only the rules for a cellular automaton need to be specified in a simple manner. Creation, interaction, updating and drawing are handled by the application.\nI also recorded the development and combined it with a explanatory voice over into a ~14 minute timelapse which you can watch here.\n  If you want to download pre-built binaries, you can check out the itch.io page.\n Created using  C++ SFML TGUI CMake  Supports the following cellular automaton  Conways game of life Generation of cave like structures Brians Brain Wire World   ","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"2924d7c3fd302d4154b8bc4d9e91d0e6","permalink":"https://timur-bahadir.de/project/cellular-automaton/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/cellular-automaton/","section":"project","summary":"A cellular automaton framework/sandbox with a development timelapse.","tags":["cpp","sfml","tgui","cellular-automaton"],"title":"Cellular Automaton - Framework | Sandbox","type":"project"},{"authors":null,"categories":null,"content":"CppColors is a library to create, handle and convert colors in C++. It started as a experiment with unit testing but actually developed into a useful library.\n","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"7d7b87679c1e2cb9974acd3734522b9a","permalink":"https://timur-bahadir.de/project/cpp-colors/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/cpp-colors/","section":"project","summary":"A C++-Library to handle colors.","tags":["cpp","CMake","testing"],"title":"CppColors","type":"project"},{"authors":null,"categories":null,"content":"For university we had to create a music finder application. The application was distributed into multiple containers. A mongoDB-Database, a java Spring Boot business logic layer, a Angular.js web app and a Flutter based Android app. The database, business logic and web app, were each separated into their own Docker container.\nMy contribution to the project consisted of the Android app, the definition and composition of the Docker images and containers and parts of the business logic implementation.\nSongs, albums and artists were collected from other services like Spotify and Youtube. Users could create accounts and tag songs, albums and artists. For each song an attempt to find it\u0026rsquo;s lyrics was made. If found they could be read inside of the app. Users could then search for songs, albums and artists by name or user given tags.\n\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r ","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"392416cdb604ae6b9a2fdd121a23f14e","permalink":"https://timur-bahadir.de/project/music-app/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/music-app/","section":"project","summary":"University Project: Micro-Service based music finder.","tags":["university","android","app","flutter","docker","micro-service","http","RESTful"],"title":"Micro-Service based music finder","type":"project"},{"authors":null,"categories":null,"content":"For university i went trough the process of learning OpenGL. I then compiled all the lessons i learned into a ~80 page long tutorial for other to read when they want to learn OpenGL. To improve upon the sources i used, i added multiple examples and many lines of code.\nWhile reading and following the tutorial and examples a small but reuseable helper library is created, around the OpenGL-C-API, using modern C++.\nTopics covered include:\n Creation of context Creation and use of VBOs, VAOs, EBOs Creation and use of Vertex- and Fragment Shaders Uniforms Rendering of 2D and 3D objects Texture loading Transformations Making use of Framebuffers  \r\r ","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"a7fff328b1924af193a2f46c5df75699","permalink":"https://timur-bahadir.de/project/opengl-tutorial/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/opengl-tutorial/","section":"project","summary":"A ~80 page long OpenGL tutorial with code examples","tags":["university","cpp","OpenGL","2D","3D","Rendering","Shaders"],"title":"OpenGL - Tutorial and Examples","type":"project"},{"authors":null,"categories":null,"content":"A casual clicker game made with Godot 3.1 using C#.\nIntended for mobile devices but delayed since mobile export with C# doesn\u0026rsquo;t work yet. A demo can be downloaded, currently only for Windows.\n  ","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"200d35424634b8990f8bb466158febdd","permalink":"https://timur-bahadir.de/project/tiler/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/tiler/","section":"project","summary":"A casual clicker game made with Godot 3.1 using C#.","tags":["csharp","godot","2D","Game Development"],"title":"Tiler","type":"project"},{"authors":null,"categories":null,"content":"For a game development class in university we had to create a game. In a team of three we decided to make use of the, at the time, new VR technology. In the game, the player is a student stuck inside a nightmare. He needs to defend himself from waves of university related utensils like books, paper airplanes and erasers. For each utensil that reaches the player he looses one life. If he runs out of lives, he loses. Utensils need to be shot using the finger guns, controlled by the HMD accompanying controllers. To win the game the player need to survive multiple waves of utensils and, as a boss fight, write his bachelor thesis (by repeatably shooting it), while also still defending himself against a endless wave of enemies.\nThe game was made using the Unity3D game engine and the SteamVR plugin. I developed most of the code and created all models and textures (except for the hand and the posters on the wall). The gameplay mechanics were programmed using C#.\nThe video below shows the game in action.\n  ","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"35b7598880c20f9f5f59e0d6ebf80b9a","permalink":"https://timur-bahadir.de/project/vr-shooter/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/vr-shooter/","section":"project","summary":"UniVRsity Nightmare is a VR game created for university.","tags":["university","csharp","Unity3D","3D","VR","FPS","Game Development","SteamVR"],"title":"UniVRsity Nightmare - A VR-Shooter","type":"project"},{"authors":null,"categories":null,"content":"A interpreter for the programming language pl0. Created using flex, bison and modern C++. Made for my compiler class in university.\n","date":1552851226,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552851226,"objectID":"124cf019a5bc6efe7bfd8c3c41e7708f","permalink":"https://timur-bahadir.de/project/pl0-interpreter/","publishdate":"2019-03-17T20:33:46+01:00","relpermalink":"/project/pl0-interpreter/","section":"project","summary":"A interpreter for the pl0 programming language.","tags":["university","cpp","interpreter","flex","bison"],"title":"pl0 Interpreter","type":"project"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share some information needed to use the SDL library with modern CMake. Most guides only use the now deprecated non target_ functions to define include directories.\nInstalling SDL To make use of SDL in your projects you first need to install it. For that i highly recommend compiling it yourself.\nDownloading the SDL source code To compile it yourself, the source code is required. You can either use mercurial like this:\nhg clone https://hg.libsdl.org/SDL SDL  or download an archive from here and then extract it somewhere you like.\nBuilding and installing SDL After downloading the source code and entering it\u0026rsquo;s directory, build it using CMake. I booth build and install debug and release binaries. Also i use the ninja generator, if you don\u0026rsquo;t just omit the -GNinja\nmkdir build cd build cmake .. -GNinja -DCMAKE_BUILD_TYPE=Debug cmake --build . --target install -- -j 4 cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release cmake --build . --clean-first --target install -- -j 4  Windows install Errors At this point if you are on windows you might run into errors. If the compilation succeeds but the installation fails, it is probably a permission problem.\nTo fix it, go to the directory CMake tried to install SDL into. In my case thats \u0026ldquo;C:\\Program Files (x86)\\SDL2\u0026rdquo;. If the directory doesn\u0026rsquo;t exist, create it. Right click on the directory and select Properties, then click on the Security tab and then click on Edit. Select the user that wants to install SDL, probably your current user, and then tick the Full Control box followed by Apply and Ok.\nRerun the installation command. This time it should work.\nConsuming SDL in your Projects SDL should now be installed on your system. Now it\u0026rsquo;s time to test if it works. For that create a simple CMake project. Inside the CMakeLists.txt file add the following lines of code.\nfind_project(SDL2 REQUIRED) target_link_libraries(cool_project PUBLIC SDL2::SDL2main SDL2::SDL2)  Obviously change cool_project to the name of your executable.\nNow inside files which are part of the cool_project executable add the following lines of code.\n#include \u0026lt;SDL2/SDL.h\u0026gt; int main(){ SDL_Init(SDL_INIT_EVERYTHING); SDL_Quit(); }  cool_project should now compile.\nMore Windows Problems Don\u0026rsquo;t forget the binaries On Windows your program should compile now but crash when started. Theres a high chance that that is because it can\u0026rsquo;t find the SDL runtime binaries. You\u0026rsquo;ll have to copy the SDL binaries to one of two spaces. Possibility One is next to your executable, possibility two is into your windows system32 directory.\nUndefined reference to main On windows theres a chance that you will get a undefined reference to main. There are multiple solutions posted online but none of them worked for me. I had to do the following.\n#include \u0026lt;SDL2/SDL.h\u0026gt; #ifdef __WIN32 #include \u0026quot;windows.h\u0026quot; #endif #ifdef __WIN32 int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE prevInstance, LPSTR lpCmdLine, int cmdShow) #else int main(int argc, char **argv) #endif // __WIN32 { SDL_Init(SDL_INIT_EVERYTHING); SDL_Quit(); return 0; }  Different include path For some reason on some of my machines the include path SDL2/SDL.h doesn\u0026rsquo;t work. On others it does. If SDL2/SDL.h doesn\u0026rsquo;t work, try just SDL.h.\n","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536444000,"objectID":"4bbcd4af3ebd0a50a48b8e927a8d8ff2","permalink":"https://timur-bahadir.de/tutorial/using_sdl/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/using_sdl/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share some information needed to use the SDL library with modern CMake. Most guides only use the now deprecated non target_ functions to define include directories.\nInstalling SDL To make use of SDL in your projects you first need to install it. For that i highly recommend compiling it yourself.\nDownloading the SDL source code To compile it yourself, the source code is required. You can either use mercurial like this:","tags":null,"title":"SDL","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share some information needed to use the SFML library with modern CMake. This guide is very similar to the one for SDL.\nInstalling SFML To make use of SFML in your projects you first need to install it. For that i highly recommend compiling it yourself.\nDownloading the SFML source code To compile it yourself, the source code is required. You can either use git like this:\ngit clone https://github.com/SFML/SFML.git  or download an archive from here and then extract it somewhere you like.\nBuilding and installing SFML After downloading the source code and entering it\u0026rsquo;s directory, build it using CMake. I booth build and install debug and release binaries. Also i use the ninja generator, if you don\u0026rsquo;t just omit the -GNinja\nmkdir build cd build cmake .. -GNinja -DCMAKE_BUILD_TYPE=Debug cmake --build . --target install -- -j 4 cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release cmake --build . --clean-first --target install -- -j 4  Windows install Errors At this point if you are on windows you might run into errors. If the compilation succeeds but the installation fails, it is probably a permission problem.\nTo fix it, go to the directory CMake tried to install SDL into. In my case thats \u0026ldquo;C:\\Program Files (x86)\\SFML\u0026rdquo;. If the directory doesn\u0026rsquo;t exist, create it. Right click on the directory and select Properties, then click on the Security tab and then click on Edit. Select the user that wants to install SDL, probably your current user, and then tick the Full Control box followed by Apply and Ok.\nRerun the installation command. This time it should work.\nConsuming SFML in your Projects SFML should now be installed on your system. Now it\u0026rsquo;s time to test if it works. For that create a simple CMake project. Inside the CMakeLists.txt file add the following lines of code.\nfind_package(SFML 2.5 COMPONENTS graphics audio REQUIRED) target_link_libraries(cool_project PUBLIC sfml-graphics sfml-audio)  Obviously change cool_project to the name of your executable. And add or remove the components you need/don\u0026rsquo;t need.\nNow inside files which are part of the cool_project executable add the following lines of code.\n#include \u0026lt;SFML/Graphics.hpp\u0026gt; int main(){ sf::RenderWindow window{{100, 100}, \u0026quot;SFML Window\u0026quot;}; sf::Event event; while(window.isOpen()){ while(window.pollEvent(event)){ if (window_event.type == sf::Event::Closed) window.close(); } window.clear(); window.display(); } return 0; }  cool_project should now compile.\nMore Windows Problems Don\u0026rsquo;t forget the binaries On Windows your program should compile now but crash when started. Theres a high chance that that is because it can\u0026rsquo;t find the SFML runtime binaries. You\u0026rsquo;ll have to copy the SFML binaries to one of two spaces. Possibility One is next to your executable, possibility two is into your windows system32 directory.\n","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536444000,"objectID":"b87c4025586c355db00c3fcd2c616552","permalink":"https://timur-bahadir.de/tutorial/using_sfml/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/using_sfml/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share some information needed to use the SFML library with modern CMake. This guide is very similar to the one for SDL.\nInstalling SFML To make use of SFML in your projects you first need to install it. For that i highly recommend compiling it yourself.\nDownloading the SFML source code To compile it yourself, the source code is required. You can either use git like this:","tags":null,"title":"SFML","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share some information needed to use the TGUI library with modern CMake. This guide is very similar to the one for TGUI.\nInstalling TGUI To make use of TGUI in your projects you first need to install it. For that i highly recommend compiling it yourself.\nDownloading the TGUI source code To compile it yourself, the source code is required. You can either use git like this:\ngit clone https://github.com/texus/TGUI.git  or download an archive from here and then extract it somewhere you like.\nBuilding and installing TGUI After downloading the source code and entering it\u0026rsquo;s directory, build it using CMake. I booth build and install debug and release binaries. Also i use the ninja generator, if you don\u0026rsquo;t just omit the -GNinja. Note that the SMFL_DIR variable needs to be set to the SFML installation directory when configuring. In my case thats \u0026ldquo;C:\\Program Files (x86)\\SFML\u0026rdquo;.\nmkdir build cd build cmake .. -GNinja -DCMAKE_BUILD_TYPE=Debug -DSFML_DIR=\u0026quot;\u0026lt;/path/to/SMFL\u0026gt;\u0026quot; cmake --build . --target install -- -j 4 cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DSFML_DIR=\u0026quot;\u0026lt;/path/to/SMFL\u0026gt;\u0026quot; cmake --build . --clean-first --target install -- -j 4  Windows install Errors At this point if you are on windows you might run into errors. If the compilation succeeds but the installation fails, it is probably a permission problem.\nTo fix it, go to the directory CMake tried to install SDL into. In my case thats \u0026ldquo;C:\\Program Files (x86)\\TGUI\u0026rdquo;. If the directory doesn\u0026rsquo;t exist, create it. Right click on the directory and select Properties, then click on the Security tab and then click on Edit. Select the user that wants to install SDL, probably your current user, and then tick the Full Control box followed by Apply and Ok.\nRerun the installation command. This time it should work. I had one instance where it still couldn\u0026rsquo;t create/find the include directory. To fix that issue simply create it by hand inside the TGUI directory.\nConsuming TGUI in your Projects TGUI should now be installed on your system. Now it\u0026rsquo;s time to test if it works. For that create a simple CMake project. Inside the CMakeLists.txt file add the following lines of code.\nfind_package(SFML 2.5 COMPONENTS graphics audio REQUIRED) find_package(TGUI 0.8 REQUIRED) target_link_libraries(cool_project PUBLIC sfml-graphics sfml-audio tgui)  Obviously change cool_project to the name of your executable. And add or remove the components you need/don\u0026rsquo;t need.\nNow inside files which are part of the cool_project executable add the following lines of code.\n#include \u0026lt;SFML/Graphics.hpp\u0026gt; #include \u0026lt;TGUI/TGUI.hpp\u0026gt; int main(){ sf::RenderWindow window{{100, 100}, \u0026quot;SFML Window\u0026quot;}; tgui::GUI gui{window}; sf::Event event; while(window.isOpen()){ while(window.pollEvent(event)){ if (window_event.type == sf::Event::Closed) window.close(); gui.handleEvent(event); } window.clear(); gui.draw(); window.display(); } return 0; }  cool_project should now compile.\nMore Windows Problems Don\u0026rsquo;t forget the binaries On Windows your program should compile now but crash when started. Theres a high chance that that is because it can\u0026rsquo;t find the TGUI runtime binaries. You\u0026rsquo;ll have to copy the TGUI binaries to one of two spaces. Possibility One is next to your executable, possibility two is into your windows system32 directory.\n","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536444000,"objectID":"98951a8608ed1acf22e82881a1ab02a0","permalink":"https://timur-bahadir.de/tutorial/using_tgui/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/using_tgui/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share some information needed to use the TGUI library with modern CMake. This guide is very similar to the one for TGUI.\nInstalling TGUI To make use of TGUI in your projects you first need to install it. For that i highly recommend compiling it yourself.\nDownloading the TGUI source code To compile it yourself, the source code is required. You can either use git like this:","tags":null,"title":"TGUI","type":"docs"}]